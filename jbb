// ==UserScript==
// @name         Sound Recorder Extension
// @description  Extension TurboWarp pour enregistrer du son
// ==/UserScript==

(function(Scratch) {
  if (!Scratch.extensions.unsandboxed) {
    throw new Error("Cette extension doit être utilisée dans TurboWarp avec 'unsandboxed extensions' activé.");
  }

  let recorder;
  let audioChunks = [];
  let isRecording = false;

  class RecorderExtension {
    getInfo() {
      return {
        id: 'soundrecorder',
        name: 'Enregistreur Audio',
        color1: '#FF5E57',
        color2: '#FF3B30',
        blocks: [
          {
            opcode: 'startRecording',
            blockType: Scratch.BlockType.COMMAND,
            text: 'démarrer l\'enregistrement'
          },
          {
            opcode: 'stopRecording',
            blockType: Scratch.BlockType.COMMAND,
            text: 'arrêter l\'enregistrement'
          },
          {
            opcode: 'getRecordingUrl',
            blockType: Scratch.BlockType.REPORTER,
            text: 'URL de l\'enregistrement'
          }
        ]
      };
    }

    async startRecording() {
      if (isRecording) return;
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      recorder = new MediaRecorder(stream);
      audioChunks = [];

      recorder.ondataavailable = event => {
        if (event.data.size > 0) {
          audioChunks.push(event.data);
        }
      };

      recorder.start();
      isRecording = true;
    }

    stopRecording() {
      return new Promise((resolve) => {
        if (!recorder || !isRecording) return resolve();
        recorder.onstop = () => {
          isRecording = false;
          resolve();
        };
        recorder.stop();
      });
    }

    getRecordingUrl() {
      if (audioChunks.length === 0) return '';
      const blob = new Blob(audioChunks, { type: 'audio/webm' });
      return URL.createObjectURL(blob);
    }
  }

  Scratch.extensions.register(new RecorderExtension());
})(Scratch);
